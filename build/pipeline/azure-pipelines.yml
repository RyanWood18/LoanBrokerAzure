# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: AppInsightsConnection
- name: AppInsightsKey
- name: SbConnection

steps:
- script: |
    dotnet restore src
    dotnet build src --configuration Release
  displayName: "Build apps"
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    arguments: '--configuration Release --output publish_output/Bank'
    projects: 'src/Bank/Bank.csproj'
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: false
  displayName: "Publish Bank app"
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    arguments: '--configuration Release --output publish_output/Broker'
    projects: 'src/Broker/Broker.csproj'
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: false
  displayName: "Publish Broker app"
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    arguments: '--configuration Release --output publish_output/CreditBureau'
    projects: 'src/CreditBureau/CreditBureau.csproj'
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: false
  displayName: "Publish CreditBureau app"
- task: ArchiveFiles@2
  displayName: "Archive Bank files"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output/Bank"
    includeRootFolder: false
    archiveFile: "$(System.DefaultWorkingDirectory)/Bank/build$(Build.BuildId).zip"
- task: ArchiveFiles@2
  displayName: "Archive Broker files"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output/Broker"
    includeRootFolder: false
    archiveFile: "$(System.DefaultWorkingDirectory)/Broker/build$(Build.BuildId).zip"
- task: ArchiveFiles@2
  displayName: "Archive Credit Bureau files"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output/CreditBureau"
    includeRootFolder: false
    archiveFile: "$(System.DefaultWorkingDirectory)/CreditBureau/build$(Build.BuildId).zip"
- task: TerraformInstaller@0
  inputs:
    terraformVersion: 'latest'
  displayName: "Terraform install"
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: 'build/tf'
    backendServiceArm: '$(Connection)'
    backendAzureRmResourceGroupName: '$(tfBackendRg)'
    backendAzureRmStorageAccountName: '$(tfBackendStorageAcc)'
    backendAzureRmContainerName: '$(tfBackendContainer)'
    backendAzureRmKey: '$(tfBackendRmKey)'
  displayName: "Terraform Init"
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: 'build/tf'
    commandOptions: '-var="Bank1Name=$(Bank1Name)" -var="Bank2Name=$(Bank2Name)" -var="Bank3Name=$(Bank3Name)" -var="BrokerName=$(BrokerName)" -var="StorageAccountName=$(StorageAccountName)" -var="Location=$(Location)" -var="ServiceBusNs=$(ServiceBusNs)" -var="CreditBureauName=$(CreditBureauName)"'
    environmentServiceNameAzureRM: '$(Connection)'
- task: TerraformTaskV2@2
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: 'build/tf'
    commandOptions: '-var="Bank1Name=$(Bank1Name)" -var="Bank2Name=$(Bank2Name)" -var="Bank3Name=$(Bank3Name)" -var="BrokerName=$(BrokerName)" -var="StorageAccountName=$(StorageAccountName)" -var="Location=$(Location)" -var="ServiceBusNs=$(ServiceBusNs)" -var="CreditBureauName=$(CreditBureauName)"'
    environmentServiceNameAzureRM: '$(Connection)'
  displayName: "Deploy infrastructure"
  name: "DeployInfra"
- bash: |
    APP_INSIGHTS_CONNECTION=$(cat $(DeployInfra.jsonOutputVariablesPath) | jq '.app_insights_connection.value' -r)
    APP_INSIGHTS_KEY=$(cat $(DeployInfra.jsonOutputVariablesPath) | jq '.app_insights_key.value' -r)
    SB_CONNECTION=$(cat $(DeployInfra.jsonOutputVariablesPath) | jq '.sb_connection.value' -r)
    echo "##vso[task.setvariable variable=AppInsightsKey]$APP_INSIGHTS_KEY"
    echo "##vso[task.setvariable variable=AppInsightsConnection]$APP_INSIGHTS_CONNECTION"
    echo "##vso[task.setvariable variable=SbConnection]$SB_CONNECTION"
- task: AzureFunctionApp@1
  displayName: "Deploy Bank 1"
  inputs:
    azureSubscription: 'Default Azure Connection'
    appType: 'functionAppLinux'
    appName: '$(Bank1Name)'
    package: '$(System.DefaultWorkingDirectory)/Bank/*.zip'
    runtimeStack: 'DOTNET|3.1'
    appSettings: '-APPINSIGHTS_CONNECTION_STRING $(AppInsightsConnection) -APPINSIGHTS_INSTRUMENTATIONKEY $(AppInsightsKey) -ServiceBusConnection $(SbConnection)'
